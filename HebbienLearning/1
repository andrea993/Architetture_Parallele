In file included from HebbianLearning.cpp:3:0:
neuron.hpp:11:2: warning: scoped enums only available with -std=c++11 or -std=gnu++11 [enabled by default]
  enum class Activation
  ^
neuron.hpp:27:18: error: ‘std::vector’ is not a type
  float Perf(std::vector u)
                  ^
neuron.hpp:19:39: error: ‘Activation’ is not a class or namespace
  Neuron(unsigned Ninp=0, Activation a=Activation::heaviside) : w(Ninp,1),a(a),w0(0) {}
                                       ^
neuron.hpp: In member function ‘float Neuron::Perf(int)’:
neuron.hpp:29:9: error: request for member ‘size’ in ‘u’, which is of non-class type ‘int’
   if (u.size() != w.size())
         ^
neuron.hpp:34:15: error: invalid types ‘int[int]’ for array subscript
    y+=w[i]*u[i];
               ^
neuron.hpp: In member function ‘float Neuron::Perfactv(float)’:
neuron.hpp:46:9: error: ‘Activation’ is not a class or namespace
    case Activation::heaviside:
         ^
neuron.hpp:47:14: error: no match for ‘operator>’ (operand types are ‘std::vector<float>’ and ‘float’)
     return (w>w0) ? 1 : 0;
              ^
neuron.hpp:47:14: note: candidates are:
In file included from /usr/include/c++/4.8/string:52:0,
                 from /usr/include/c++/4.8/bits/locale_classes.h:40,
                 from /usr/include/c++/4.8/bits/ios_base.h:41,
                 from /usr/include/c++/4.8/ios:42,
                 from /usr/include/c++/4.8/ostream:38,
                 from /usr/include/c++/4.8/iostream:39,
                 from HebbianLearning.cpp:2:
/usr/include/c++/4.8/bits/basic_string.h:2630:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator>(const _CharT*, const std::basic_string<_CharT, _Traits, _Alloc>&)
     operator>(const _CharT* __lhs,
     ^
/usr/include/c++/4.8/bits/basic_string.h:2630:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   mismatched types ‘const _CharT*’ and ‘std::vector<float>’
     return (w>w0) ? 1 : 0;
               ^
In file included from /usr/include/c++/4.8/string:52:0,
                 from /usr/include/c++/4.8/bits/locale_classes.h:40,
                 from /usr/include/c++/4.8/bits/ios_base.h:41,
                 from /usr/include/c++/4.8/ios:42,
                 from /usr/include/c++/4.8/ostream:38,
                 from /usr/include/c++/4.8/iostream:39,
                 from HebbianLearning.cpp:2:
/usr/include/c++/4.8/bits/basic_string.h:2618:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator>(const std::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)
     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/include/c++/4.8/bits/basic_string.h:2618:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   ‘std::vector<float>’ is not derived from ‘const std::basic_string<_CharT, _Traits, _Alloc>’
     return (w>w0) ? 1 : 0;
               ^
In file included from /usr/include/c++/4.8/string:52:0,
                 from /usr/include/c++/4.8/bits/locale_classes.h:40,
                 from /usr/include/c++/4.8/bits/ios_base.h:41,
                 from /usr/include/c++/4.8/ios:42,
                 from /usr/include/c++/4.8/ostream:38,
                 from /usr/include/c++/4.8/iostream:39,
                 from HebbianLearning.cpp:2:
/usr/include/c++/4.8/bits/basic_string.h:2606:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator>(const std::basic_string<_CharT, _Traits, _Alloc>&, const std::basic_string<_CharT, _Traits, _Alloc>&)
     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/include/c++/4.8/bits/basic_string.h:2606:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   ‘std::vector<float>’ is not derived from ‘const std::basic_string<_CharT, _Traits, _Alloc>’
     return (w>w0) ? 1 : 0;
               ^
In file included from /usr/include/c++/4.8/vector:64:0,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_vector.h:1434:5: note: template<class _Tp, class _Alloc> bool std::operator>(const std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)
     operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
     ^
/usr/include/c++/4.8/bits/stl_vector.h:1434:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   mismatched types ‘const std::vector<_Tp, _Alloc>’ and ‘float’
     return (w>w0) ? 1 : 0;
               ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_iterator.h:359:5: note: template<class _IteratorL, class _IteratorR> bool std::operator>(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)
     operator>(const reverse_iterator<_IteratorL>& __x,
     ^
/usr/include/c++/4.8/bits/stl_iterator.h:359:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   ‘std::vector<float>’ is not derived from ‘const std::reverse_iterator<_Iterator>’
     return (w>w0) ? 1 : 0;
               ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_iterator.h:309:5: note: template<class _Iterator> bool std::operator>(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_Iterator>&)
     operator>(const reverse_iterator<_Iterator>& __x,
     ^
/usr/include/c++/4.8/bits/stl_iterator.h:309:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   ‘std::vector<float>’ is not derived from ‘const std::reverse_iterator<_Iterator>’
     return (w>w0) ? 1 : 0;
               ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:64:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_pair.h:233:5: note: template<class _T1, class _T2> bool std::operator>(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)
     operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
     ^
/usr/include/c++/4.8/bits/stl_pair.h:233:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   ‘std::vector<float>’ is not derived from ‘const std::pair<_T1, _T2>’
     return (w>w0) ? 1 : 0;
               ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_iterator.h:848:5: note: template<class _Iterator, class _Container> bool __gnu_cxx::operator>(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&)
     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
     ^
/usr/include/c++/4.8/bits/stl_iterator.h:848:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   ‘std::vector<float>’ is not derived from ‘const __gnu_cxx::__normal_iterator<_Iterator, _Container>’
     return (w>w0) ? 1 : 0;
               ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_iterator.h:842:5: note: template<class _IteratorL, class _IteratorR, class _Container> bool __gnu_cxx::operator>(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)
     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
     ^
/usr/include/c++/4.8/bits/stl_iterator.h:842:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:47:15: note:   ‘std::vector<float>’ is not derived from ‘const __gnu_cxx::__normal_iterator<_IteratorL, _Container>’
     return (w>w0) ? 1 : 0;
               ^
neuron.hpp:48:9: error: ‘Activation’ is not a class or namespace
    case Activation::linear:
         ^
neuron.hpp:50:9: error: ‘Activation’ is not a class or namespace
    case Activation::sigmoid:
         ^
neuron.hpp:52:19: error: expected primary-expression before ‘:’ token
    case Activation:tanh:
                   ^
neuron.hpp:53:27: error: no match for ‘operator-’ (operand type is ‘std::vector<float>’)
     return (exp(u/w0)-exp(-w/w0))/(exp(u/wo)+exp(-u/w0);
                           ^
neuron.hpp:53:27: note: candidates are:
In file included from /usr/include/c++/4.8/vector:65:0,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_bvector.h:208:3: note: std::ptrdiff_t std::operator-(const std::_Bit_iterator_base&, const std::_Bit_iterator_base&)
   operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
   ^
/usr/include/c++/4.8/bits/stl_bvector.h:208:3: note:   candidate expects 2 arguments, 1 provided
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_iterator.h:384:5: note: template<class _IteratorL, class _IteratorR> typename std::reverse_iterator<_Iterator>::difference_type std::operator-(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)
     operator-(const reverse_iterator<_IteratorL>& __x,
     ^
/usr/include/c++/4.8/bits/stl_iterator.h:384:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:53:28: note:   ‘std::vector<float>’ is not derived from ‘const std::reverse_iterator<_Iterator>’
     return (exp(u/w0)-exp(-w/w0))/(exp(u/wo)+exp(-u/w0);
                            ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_iterator.h:327:5: note: template<class _Iterator> typename std::reverse_iterator<_Iterator>::difference_type std::operator-(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_Iterator>&)
     operator-(const reverse_iterator<_Iterator>& __x,
     ^
/usr/include/c++/4.8/bits/stl_iterator.h:327:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:53:28: note:   ‘std::vector<float>’ is not derived from ‘const std::reverse_iterator<_Iterator>’
     return (exp(u/w0)-exp(-w/w0))/(exp(u/wo)+exp(-u/w0);
                            ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_iterator.h:896:5: note: template<class _Iterator, class _Container> typename __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&)
     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
     ^
/usr/include/c++/4.8/bits/stl_iterator.h:896:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:53:28: note:   ‘std::vector<float>’ is not derived from ‘const __gnu_cxx::__normal_iterator<_Iterator, _Container>’
     return (exp(u/w0)-exp(-w/w0))/(exp(u/wo)+exp(-u/w0);
                            ^
In file included from /usr/include/c++/4.8/bits/stl_algobase.h:67:0,
                 from /usr/include/c++/4.8/vector:60,
                 from HebbianLearning.cpp:1:
/usr/include/c++/4.8/bits/stl_iterator.h:889:5: note: template<class _IteratorL, class _IteratorR, class _Container> typename __gnu_cxx::__normal_iterator<_IteratorL, _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)
     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
     ^
/usr/include/c++/4.8/bits/stl_iterator.h:889:5: note:   template argument deduction/substitution failed:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:53:28: note:   ‘std::vector<float>’ is not derived from ‘const __gnu_cxx::__normal_iterator<_IteratorL, _Container>’
     return (exp(u/w0)-exp(-w/w0))/(exp(u/wo)+exp(-u/w0);
                            ^
neuron.hpp:53:42: error: ‘wo’ was not declared in this scope
     return (exp(u/w0)-exp(-w/w0))/(exp(u/wo)+exp(-u/w0);
                                          ^
neuron.hpp:53:56: error: expected ‘)’ before ‘;’ token
     return (exp(u/w0)-exp(-w/w0))/(exp(u/wo)+exp(-u/w0);
                                                        ^
HebbianLearning.cpp: At global scope:
HebbianLearning.cpp:5:15: error: ‘u1’ was not declared in this scope
 float fitness(u1, u2)
               ^
HebbianLearning.cpp:5:19: error: ‘u2’ was not declared in this scope
 float fitness(u1, u2)
                   ^
HebbianLearning.cpp:5:21: error: expression list treated as compound expression in initializer [-fpermissive]
 float fitness(u1, u2)
                     ^
HebbianLearning.cpp:6:1: error: expected ‘,’ or ‘;’ before ‘{’ token
 {
 ^
HebbianLearning.cpp: In function ‘int main()’:
HebbianLearning.cpp:12:22: error: ‘Neuron::Activation’ is not a class or namespace
  Neuron n(2, Neuron::Activation::heaviside);
                      ^
HebbianLearning.cpp:18:31: error: ‘>>’ should be ‘> >’ within a nested template argument list
  std::vector<std::vector<float>> dataset_u = { {0,0}, {0,1}, {1,0}, {1,1} };
                               ^
HebbianLearning.cpp:18:75: error: in C++98 ‘dataset_u’ must be initialized by constructor, not by ‘{...}’
  std::vector<std::vector<float>> dataset_u = { {0,0}, {0,1}, {1,0}, {1,1} };
                                                                           ^
HebbianLearning.cpp:18:75: warning: extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by default]
HebbianLearning.cpp:18:75: error: could not convert ‘{{0, 0}, {0, 1}, {1, 0}, {1, 1}}’ from ‘<brace-enclosed initializer list>’ to ‘std::vector<std::vector<float> >’
HebbianLearning.cpp:22:56: error: ‘fitness’ cannot be used as a function
   dataset_y[i]=fitness(dataset_u[i][0], dataset_u[i][1]);
                                                        ^
HebbianLearning.cpp:30:31: error: no matching function for call to ‘Neuron::Perf(std::vector<float>&)’
    if (int(n.Perf(dataset_u[i])) != int(datset_y[i]))
                               ^
HebbianLearning.cpp:30:31: note: candidate is:
In file included from HebbianLearning.cpp:3:0:
neuron.hpp:27:8: note: float Neuron::Perf(int)
  float Perf(std::vector u)
        ^
neuron.hpp:27:8: note:   no known conversion for argument 1 from ‘std::vector<float>’ to ‘int’
HebbianLearning.cpp:30:41: error: ‘datset_y’ was not declared in this scope
    if (int(n.Perf(dataset_u[i])) != int(datset_y[i]))
                                         ^
HebbianLearning.cpp:39:29: error: name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]
   float dw_0 = nu*dataset_u[i][0]*dataset_y[i];
                             ^
HebbianLearning.cpp:39:29: note: (if you use ‘-fpermissive’ G++ will accept your code)
